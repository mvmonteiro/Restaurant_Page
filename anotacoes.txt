- ESLint
  - npm init @eslint/config
    - ultima opção
    - JS com import
    - react
    - sim
    - browser
    - nosso estilo
    - .json
    - tabs - simples - unix - yes - yes - npm
  - npx eslint ./src --fix -> para arrumar todos arquivos sem ter que entrar
    - dá um erro -> somos obrigado a importar o react ao utilizar o jsx -> nas versões mais atualizadas não precisamos, então colocamos uma regra
      que permite isso -> "react/react-in-jsx-scope": "off",
  - O ESLint é uma ferramenta que analisa o código e aponta quaisquer problemas que encontrar. Ele pode encontrar bugs, áreas potencialmente 
    problemáticas, estilos de codificação ruins e questões de estilo.

- Novas Rotas
  - dentro da pasta page
    - Nova pasta: Home
  - Refatoração de código -> vamos utilizar um arquivo que teoricamente era pra ser somente do cardapio
    - Nova pasta dentro src: data -> onde estarão os arquivos que vão ser compartilhados entre a aplicação

- SPA
  - não precisamos criar um html para cada página
  - só tem um html e a partir dele o JS aplica as coisas necessárias nele
  - através do createRoot, o react faz a inserção do html la dentro

- Mudança de Rotas
  - const componenteAtual = window.location.pathname === '/' ? <Home /> : <Cardapio />;
  - ternário de componentização -> não é muito eficiente -> vai trocar depois
    - muito verboso
    - não resolve alguns do problemas
    - existem pacotes que servem pra isso
  - npm i react-router-dom
  - novo arquivos em src: routes.js
    - browserRouter -> permite acessa o window.location.pathname -> qualquer coisa que vem depois do /
    - Routes -> funciona como um switch -> sempre para na primeira rota que ele encontra
    - Route -> onde colocamos o path -> atributos path e element (elemento que vai ser renderizado)
      - dentro de cada route coloca o elemento que queremos renderizar com o seu path
  - tiramos a maneira antiga de reendiração para colocar a nova com o Router
    - agora as rotas funcionam normalmente: home com o '/' e o cardapio no '/cardapio'

- Reaproveitamento de código
  - o menu aparece em todas as páginas
  - nova pasta: components
    - reaproveitamento de componentes em todas páginas: como o menu
    - dentro vem a pasta Menu
    - criamos o arquivo menu com suas tags ali dentro e o seu css
    - ao invés de importar o compoente <Menu/> em cada rota -> vamos fazer um layout padrão para todas rotas
  - Colocamos o novo componente <Menu /> dentro do routes.js (FORA DO "SWITCH") -> REACT ROUTER DOM
    - assim o menu vai aparecer como layout em todas rotas
    - reaproveitamento de código -> não tem uma nova reenderização -> o componente fica estático

- Criação da navbar
  - dentro do arquivo do menu
    - estruturação da barra de navegação
    - como utilizamos a tag "a" -> tem refresh -> de forma nativa o dom funciona assim -> toda a página é destruida e feita novamente
    - não queremos esse refresh
      - trocamos a tag "a" para "link"
        - tira o refresh -> tudo acontece na mesma página -> a renderização acontece só com o que precisa

- Reaproveitamento do header
  - colocamos o header dentro do arquivo de rotas
    - introduzimos um arquivo css para as rotas -> não é bom fazer isso, as rotas não devem ter css
    - além disso, qualquer rota que colocamos aparece o header e a navbar -> tem que aparecer uma página de erro

- Página padrão (com tudo certinho)
  - utilização do children do React Router Dom -> Outlet -> dentro do layout
  - dentro do routes.js é feita a lógica para utilizar o layout somente em determinadas páginas
    - o route index significa que vai renderizar o que tiver no elemento pai, no caso o path '/'
    - além disso tiramos o '/' do path do '/cardapio' -> o react router dom v6 funciona com path relativo
      - não precisa fazer o path absoluto -> ele está relativo ao elemento pai 
        - se o elemento pai estiver "path=/banana" -> o elemento filho pode colocar somente "path=asd" e irá utilizar o path /banana/asd
        - Nested routes (nome disso)

- Estilo tema
  - vamos ter um estilo tema padrão que vamos criar
    - tanto o container e o titulo vem dentro dele
  - utilizando o react router dom para adicionar um tema padrão com o arquivo Tema.module.scss dentro de styles
  - deixa o css dos outros arquivos mais enxuto

- Finalização da tela Home
  - coisa padrão

- Tela de sobre
  - adiciona ela no routes
  - faz a tela em si -> nada de especial

- Criando página não encontrada
  - antes criamos o footer como um component -> adiciona ele no routes.js
  - para a notFound fizemos um notFound.tsx dentro de Pages
    - faz o html com o react normal -> utilizamos uma imagem SVG por isso ela fica como uma tag
  - agora devemos adicionar essa página às rotas
    - coloca um element='notFound'
    - um path='*' -> isso vai dizer que pra todas as rotas que não forem iguais as que estão dentro do switch -> aparece o notFound
    - agora temos uma página 404
      - ela ainda está pegando o header! aquela imagem em baixo da navbar
  - o react router tem um historico de navegação
    - funciona como uma pilha
    - quando queremos voltar da pra voltar para página anterior da pilha
      - useNavigate() -> função de navegação de rotas
      - quando utilizamos o navigate(-1) -> faz com que volte 1 página da pilha

- Rota para cada prato
  - adiciona o arquivo com a página dos pratos
  - utilização do hook useParams
    - essa função retorna o parâmetro utilizado na rota da URL atual
  - useLocation()
    - função que mostra diversas variáveis relacionadas à url
    - dentro da Home fizemos um redirecionamento de navegação para a página: prato/idDoPrato
    - junto com essa informação a função navigate() permite um segundo argumento -> o state
      - nesse argumento colocamos todo o objeto que é aquele prato que foi clicado e enviamos como informação que pode ser acessado 
        pelo useLocation
      - assim conseguimos acesso ao estado que foi enviado
    - replace: true -> faz que aconteça a navegação esquecendo a posição anterior -> ou seja, ele substitui o lugar da navegação anterior
    - com todas as informações podemos montar a página de cada prato
      - entretanto estamos fazendo a partir da home page -> dela sabemos que prato foi escolhido
      - o usuário pode colocar na url direto o id do prato
        - devemos usar useParams para saber de que prato estamos tratando